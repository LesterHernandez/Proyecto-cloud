// CREACION DE SERVIDOR EXPRESS QUE SE CONECTA A POSTGRESQL Y EXPONE UNA API PARA OBTENER DATOS

const express = require('express');
const cors = require('cors');
const { Pool } = require('pg');
const bcrypt = require('bcrypt');
const bodyParser = require('body-parser');
const jwt = require('jsonwebtoken');

const app = express();
const PORT = 5000;

// Middleware
app.use(cors({
    origin: 'http://localhost:3000',  // Cambia al puerto donde está corriendo tu frontend
    methods: ['POST', 'GET', 'OPTIONS'],
    allowedHeaders: ['Content-Type']
}));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Conexión a la base de datos de PostgreSQL
const pool = new Pool({
    user: 'postgres', // reemplaza con tu usuario de PostgreSQL
    host: 'localhost',
    database: 'Carnespa', // reemplaza con tu base de datos
    password: 'estudio', // reemplaza con tu contraseña
    port: 5432, // puerto por defecto de PostgreSQL
});

// Rutas de prueba
app.get('/', (req, res) => {
    res.send('Servidor de Express está funcionando');
});

// Ruta para obtener todos los productos
app.get('/api/products', async (req, res) => {
    try {
        const result = await pool.query("SELECT * FROM product WHERE status = '1'");
        console.log('Resultado:', result.rows); // Log del resultado
        res.json(result.rows);
    } catch (err) {
        console.error('Error en la consulta:', err.message); // Log del error
        res.status(500).send('Error en el servidor');
    }
});

// Rutas para obtener productos por categoría
app.get('/api/products/category/chorizos-y-longanizas', async (req, res) => {
    try {
        const result = await pool.query("SELECT * FROM product WHERE status = '1' AND category = 'cl'");
        console.log('Resultado:', result.rows); // Log del resultado
        res.json(result.rows);
    } catch (err) {
        console.error('Error en la consulta:', err.message); // Log del error
        res.status(500).send('Error en el servidor');
    }
});

app.get('/api/products/category/madurados', async (req, res) => {
    try {
        const result = await pool.query("SELECT * FROM product WHERE status = '1' AND category = 'm'");
        console.log('Resultado:', result.rows); // Log del resultado
        res.json(result.rows);
    } catch (err) {
        console.error('Error en la consulta:', err.message); // Log del error
        res.status(500).send('Error en el servidor');
    }
});

app.get('/api/products/category/embutidos', async (req, res) => {
    try {
        const result = await pool.query("SELECT * FROM product WHERE status = '1' AND category = 'e'");
        console.log('Resultado:', result.rows); // Log del resultado
        res.json(result.rows);
    } catch (err) {
        console.error('Error en la consulta:', err.message); // Log del error
        res.status(500).send('Error en el servidor');
    }
});

app.get('/api/products/category/carnes', async (req, res) => {
    try {
        const result = await pool.query("SELECT * FROM product WHERE status = '1' AND category = 'c'");
        console.log('Resultado:', result.rows); // Log del resultado
        res.json(result.rows);
    } catch (err) {
        console.error('Error en la consulta:', err.message); // Log del error
        res.status(500).send('Error en el servidor');
    }
});

// Ruta para obtener un producto por ID
app.get('/api/products/:id', async (req, res) => {
    const { id } = req.params;

    if (!id) {
        return res.status(400).json({ message: 'ID del producto es requerido' });
    }

    try {
        const result = await pool.query('SELECT * FROM product WHERE id_product = $1', [parseInt(id, 10)]);
        
        if (result.rows.length === 0) {
            return res.status(404).json({ message: 'Producto no encontrado' });
        }

        res.json(result.rows[0]);
    } catch (err) {
        console.error('Error en la consulta:', err.message);
        res.status(500).send('Error en el servidor');
    }
});

// Ruta para registrar un administrador
app.post('/Registros.js', async (req, res) => {
    const { name, password, e_mail, address } = req.body;

    try {
        const hashedPassword = await bcrypt.hash(password, 10); // Encriptar la contraseña
        const query = `
            INSERT INTO administrator (name, e_mail, status, password, address)
            VALUES ($1, $2, 'on-line', $3, $4)
        `;
        const result = await pool.query(query, [name, e_mail, hashedPassword, address]);

        if (result.rowCount > 0) {
            res.status(200).send('Registro exitoso!');
        } else {
            res.status(500).send('Error al registrar.');
        }
    } catch (err) {
        console.error(err);
        res.status(500).send('Error en el servidor');
    }
});

// Ruta para el login de administrador
app.post('/login', async (req, res) => {
    const { e_mail, password } = req.body;

    try {
        const result = await pool.query(
            'SELECT * FROM administrator WHERE e_mail = $1', [e_mail]
        );
        const user = result.rows[0];

        if (!user) {
            return res.status(400).json({ error: 'Usuario no encontrado' });
        }

        // Verificar la contraseña
        const validPassword = await bcrypt.compare(password, user.password);
        if (!validPassword) {
            return res.status(400).json({ error: 'Contraseña incorrecta' });
        }

        // Generar un token JWT
        const token = jwt.sign({ e_mail: user.e_mail }, 'SECRET_KEY', { expiresIn: '1h' });

        res.json({ token });
    } catch (error) {
        console.error('Error al consultar la base de datos', error);
        res.status(500).json({ error: 'Error del servidor' });
    }
});

// Iniciar el servidor
app.listen(PORT, () => {
    console.log(`Servidor corriendo en el puerto ${PORT}`);
});
